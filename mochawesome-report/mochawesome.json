{
  "stats": {
    "suites": 15,
    "tests": 15,
    "passes": 8,
    "pending": 0,
    "failures": 7,
    "start": "2024-05-02T14:30:16.021Z",
    "end": "2024-05-02T14:30:17.393Z",
    "duration": 1372,
    "testsRegistered": 15,
    "passPercent": 53.333333333333336,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "458be08c-e7a0-4693-a76f-ae3b354d640b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e9eab51d-a6af-4194-89f2-d1fb43cfc252",
          "title": "Testing station 1",
          "fullFile": "/home/alex/dev/virta-assignment/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "744f5ec7-4455-4f1c-8e4f-ac50ece6c3e9",
              "title": "Version API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return version",
                  "fullTitle": "Testing station 1 Version API should return version",
                  "timedOut": false,
                  "duration": 244,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getVersion(station.id);\n// Check if version is returned or check for exact version if version specified for station in test data\nif (station.version) {\n  assert.equal(res.result, station.version, \"Version missmatch\");\n} else {\n  assert.exists(res.result, \"No version returned from API\");\n}",
                  "err": {},
                  "uuid": "91b19b3e-6428-404f-a90d-941784062073",
                  "parentUUID": "744f5ec7-4455-4f1c-8e4f-ac50ece6c3e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91b19b3e-6428-404f-a90d-941784062073"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 244,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "792450a3-65bc-4b3d-801d-3f1e2d514810",
              "title": "Interval API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return interval",
                  "fullTitle": "Testing station 1 Interval API should return interval",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getInterval(station.id);\nassert.exists(res.result, \"No Interval returned from API\");\nexistingInterval = res.result;",
                  "err": {},
                  "uuid": "301b8bae-8cc6-4e75-9083-0900bf023e0f",
                  "parentUUID": "792450a3-65bc-4b3d-801d-3f1e2d514810",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set interval",
                  "fullTitle": "Testing station 1 Interval API should set interval",
                  "timedOut": false,
                  "duration": 50,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add 1 to existing interval so it does not match existing value\nnewInterval = existingInterval + 1;\nconst setRes = await setInterval(station.id, newInterval);\nassert.equal(setRes.result, \"OK\", \"Failed to set new interval\");\nconst getRes = await getInterval(station.id);\nassert.equal(\n  getRes.result,\n  newInterval,\n  \"Interval missmatch, interval did not update properly\"\n);",
                  "err": {
                    "message": "AssertionError: Failed to set new interval: expected 'FAILED' to equal 'OK'",
                    "estack": "AssertionError: Failed to set new interval: expected 'FAILED' to equal 'OK'\n    at Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:30:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- FAILED\n+ OK\n"
                  },
                  "uuid": "a244900d-3b8e-4663-8a3d-4e3b864ed0dd",
                  "parentUUID": "792450a3-65bc-4b3d-801d-3f1e2d514810",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "301b8bae-8cc6-4e75-9083-0900bf023e0f"
              ],
              "failures": [
                "a244900d-3b8e-4663-8a3d-4e3b864ed0dd"
              ],
              "pending": [],
              "skipped": [],
              "duration": 100,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f276d499-2724-45dd-b286-e173e79357e1",
          "title": "Testing station 2",
          "fullFile": "/home/alex/dev/virta-assignment/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d605571-23b9-425d-a750-3193c23dca65",
              "title": "Version API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return version",
                  "fullTitle": "Testing station 2 Version API should return version",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getVersion(station.id);\n// Check if version is returned or check for exact version if version specified for station in test data\nif (station.version) {\n  assert.equal(res.result, station.version, \"Version missmatch\");\n} else {\n  assert.exists(res.result, \"No version returned from API\");\n}",
                  "err": {},
                  "uuid": "d3ec31d0-20c2-4a83-b4a6-f9ad1806cd6b",
                  "parentUUID": "6d605571-23b9-425d-a750-3193c23dca65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3ec31d0-20c2-4a83-b4a6-f9ad1806cd6b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 48,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1fb7d21-dcab-44ab-b8de-1103b909ecd3",
              "title": "Interval API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return interval",
                  "fullTitle": "Testing station 2 Interval API should return interval",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getInterval(station.id);\nassert.exists(res.result, \"No Interval returned from API\");\nexistingInterval = res.result;",
                  "err": {},
                  "uuid": "a4d14eb2-b172-4e90-aaa3-430f1c9cdd3a",
                  "parentUUID": "e1fb7d21-dcab-44ab-b8de-1103b909ecd3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set interval",
                  "fullTitle": "Testing station 2 Interval API should set interval",
                  "timedOut": false,
                  "duration": 50,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add 1 to existing interval so it does not match existing value\nnewInterval = existingInterval + 1;\nconst setRes = await setInterval(station.id, newInterval);\nassert.equal(setRes.result, \"OK\", \"Failed to set new interval\");\nconst getRes = await getInterval(station.id);\nassert.equal(\n  getRes.result,\n  newInterval,\n  \"Interval missmatch, interval did not update properly\"\n);",
                  "err": {
                    "message": "AssertionError: Failed to set new interval: expected 'FAILED' to equal 'OK'",
                    "estack": "AssertionError: Failed to set new interval: expected 'FAILED' to equal 'OK'\n    at Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:30:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- FAILED\n+ OK\n"
                  },
                  "uuid": "8aa3ab87-6f26-4d9b-809b-3f0eb3a4cd1c",
                  "parentUUID": "e1fb7d21-dcab-44ab-b8de-1103b909ecd3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4d14eb2-b172-4e90-aaa3-430f1c9cdd3a"
              ],
              "failures": [
                "8aa3ab87-6f26-4d9b-809b-3f0eb3a4cd1c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "de00e58c-63d5-4c22-9a9a-3cff09893e26",
          "title": "Testing station 3",
          "fullFile": "/home/alex/dev/virta-assignment/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "407b94d0-cb9e-4ec6-b638-5ad046ed8337",
              "title": "Version API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return version",
                  "fullTitle": "Testing station 3 Version API should return version",
                  "timedOut": false,
                  "duration": 261,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getVersion(station.id);\n// Check if version is returned or check for exact version if version specified for station in test data\nif (station.version) {\n  assert.equal(res.result, station.version, \"Version missmatch\");\n} else {\n  assert.exists(res.result, \"No version returned from API\");\n}",
                  "err": {},
                  "uuid": "e76c5fbd-dea6-411a-9abf-56ba7bcd8eb5",
                  "parentUUID": "407b94d0-cb9e-4ec6-b638-5ad046ed8337",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e76c5fbd-dea6-411a-9abf-56ba7bcd8eb5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 261,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3aedaa7a-473b-4628-b1db-e97a89afa80a",
              "title": "Interval API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return interval",
                  "fullTitle": "Testing station 3 Interval API should return interval",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getInterval(station.id);\nassert.exists(res.result, \"No Interval returned from API\");\nexistingInterval = res.result;",
                  "err": {},
                  "uuid": "912e385b-feed-4cd7-8cb4-638ab0d37e48",
                  "parentUUID": "3aedaa7a-473b-4628-b1db-e97a89afa80a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set interval",
                  "fullTitle": "Testing station 3 Interval API should set interval",
                  "timedOut": false,
                  "duration": 258,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add 1 to existing interval so it does not match existing value\nnewInterval = existingInterval + 1;\nconst setRes = await setInterval(station.id, newInterval);\nassert.equal(setRes.result, \"OK\", \"Failed to set new interval\");\nconst getRes = await getInterval(station.id);\nassert.equal(\n  getRes.result,\n  newInterval,\n  \"Interval missmatch, interval did not update properly\"\n);",
                  "err": {
                    "message": "AssertionError: Interval missmatch, interval did not update properly: expected 20 to equal 21",
                    "estack": "AssertionError: Interval missmatch, interval did not update properly: expected 20 to equal 21\n    at Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:32:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": "- 20\n+ 21\n"
                  },
                  "uuid": "477cd00c-fda9-4579-929e-796b1c63f25f",
                  "parentUUID": "3aedaa7a-473b-4628-b1db-e97a89afa80a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "912e385b-feed-4cd7-8cb4-638ab0d37e48"
              ],
              "failures": [
                "477cd00c-fda9-4579-929e-796b1c63f25f"
              ],
              "pending": [],
              "skipped": [],
              "duration": 306,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3903e20-aab5-4510-883d-26bf17b95243",
          "title": "Testing station 4",
          "fullFile": "/home/alex/dev/virta-assignment/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "33f78ae3-6ee8-4a37-8ade-7d12ec14ce46",
              "title": "Version API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return version",
                  "fullTitle": "Testing station 4 Version API should return version",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getVersion(station.id);\n// Check if version is returned or check for exact version if version specified for station in test data\nif (station.version) {\n  assert.equal(res.result, station.version, \"Version missmatch\");\n} else {\n  assert.exists(res.result, \"No version returned from API\");\n}",
                  "err": {},
                  "uuid": "197fc265-b146-42c9-bae9-080ace02a1de",
                  "parentUUID": "33f78ae3-6ee8-4a37-8ade-7d12ec14ce46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "197fc265-b146-42c9-bae9-080ace02a1de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01143489-2515-4907-991c-7ef201068efd",
              "title": "Interval API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return interval",
                  "fullTitle": "Testing station 4 Interval API should return interval",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getInterval(station.id);\nassert.exists(res.result, \"No Interval returned from API\");\nexistingInterval = res.result;",
                  "err": {},
                  "uuid": "8693c25e-4431-4128-891c-4f5bc6248f2b",
                  "parentUUID": "01143489-2515-4907-991c-7ef201068efd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set interval",
                  "fullTitle": "Testing station 4 Interval API should set interval",
                  "timedOut": false,
                  "duration": 52,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add 1 to existing interval so it does not match existing value\nnewInterval = existingInterval + 1;\nconst setRes = await setInterval(station.id, newInterval);\nassert.equal(setRes.result, \"OK\", \"Failed to set new interval\");\nconst getRes = await getInterval(station.id);\nassert.equal(\n  getRes.result,\n  newInterval,\n  \"Interval missmatch, interval did not update properly\"\n);",
                  "err": {
                    "message": "AssertionError: Failed to set new interval: expected true to equal 'OK'",
                    "estack": "AssertionError: Failed to set new interval: expected true to equal 'OK'\n    at Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:30:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "1e8cc37f-9c20-401f-a5b5-7e802449f147",
                  "parentUUID": "01143489-2515-4907-991c-7ef201068efd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8693c25e-4431-4128-891c-4f5bc6248f2b"
              ],
              "failures": [
                "1e8cc37f-9c20-401f-a5b5-7e802449f147"
              ],
              "pending": [],
              "skipped": [],
              "duration": 102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cfd0638a-1b34-4f73-98c9-7acbb5a9678d",
          "title": "Testing station 5",
          "fullFile": "/home/alex/dev/virta-assignment/test.js",
          "file": "/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fc9b194a-abee-47fe-94eb-bcbfe8de8e43",
              "title": "Version API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return version",
                  "fullTitle": "Testing station 5 Version API should return version",
                  "timedOut": false,
                  "duration": 49,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getVersion(station.id);\n// Check if version is returned or check for exact version if version specified for station in test data\nif (station.version) {\n  assert.equal(res.result, station.version, \"Version missmatch\");\n} else {\n  assert.exists(res.result, \"No version returned from API\");\n}",
                  "err": {
                    "message": "AssertionError: Failed to get version: Internal Server Error, code 500",
                    "estack": "AssertionError: Failed to get version: Internal Server Error, code 500\n    at getVersion (file:///home/alex/dev/virta-assignment/api/virta-api.js:13:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:9:21)",
                    "diff": null
                  },
                  "uuid": "1096d723-658c-4c8d-9848-63363b45a18e",
                  "parentUUID": "fc9b194a-abee-47fe-94eb-bcbfe8de8e43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1096d723-658c-4c8d-9848-63363b45a18e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3b4ef7f-e1b8-422a-9836-b6d0a00f9cab",
              "title": "Interval API",
              "fullFile": "/home/alex/dev/virta-assignment/test.js",
              "file": "/test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return interval",
                  "fullTitle": "Testing station 5 Interval API should return interval",
                  "timedOut": false,
                  "duration": 46,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const res = await getInterval(station.id);\nassert.exists(res.result, \"No Interval returned from API\");\nexistingInterval = res.result;",
                  "err": {
                    "message": "AssertionError: Failed to get interval: Internal Server Error, code 500",
                    "estack": "AssertionError: Failed to get interval: Internal Server Error, code 500\n    at getInterval (file:///home/alex/dev/virta-assignment/api/virta-api.js:28:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:22:21)",
                    "diff": null
                  },
                  "uuid": "fd466ccd-4956-4e46-a8b5-cdf404dba7cd",
                  "parentUUID": "a3b4ef7f-e1b8-422a-9836-b6d0a00f9cab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should set interval",
                  "fullTitle": "Testing station 5 Interval API should set interval",
                  "timedOut": false,
                  "duration": 49,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Add 1 to existing interval so it does not match existing value\nnewInterval = existingInterval + 1;\nconst setRes = await setInterval(station.id, newInterval);\nassert.equal(setRes.result, \"OK\", \"Failed to set new interval\");\nconst getRes = await getInterval(station.id);\nassert.equal(\n  getRes.result,\n  newInterval,\n  \"Interval missmatch, interval did not update properly\"\n);",
                  "err": {
                    "message": "AssertionError: Failed to set interval: Internal Server Error, code 500",
                    "estack": "AssertionError: Failed to set interval: Internal Server Error, code 500\n    at setInterval (file:///home/alex/dev/virta-assignment/api/virta-api.js:43:3)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (file:///home/alex/dev/virta-assignment/test.js:29:24)",
                    "diff": null
                  },
                  "uuid": "67ff5df6-12e9-4ba7-b4c7-ed091df6f62c",
                  "parentUUID": "a3b4ef7f-e1b8-422a-9836-b6d0a00f9cab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "fd466ccd-4956-4e46-a8b5-cdf404dba7cd",
                "67ff5df6-12e9-4ba7-b4c7-ed091df6f62c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 95,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}